// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// --- Modelos Principais ---

model Usuario {
  id           String    @id @default(uuid())
  nome         String
  email        String    @unique
  passwordHash String?
  role         Role      @default(corretor)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  superiorId   String?
  superior     Usuario?  @relation("Hierarquia", fields: [superiorId], references: [id], onDelete: SetNull)
  subordinados Usuario[] @relation("Hierarquia")

  clientes     Cliente[]
  tarefas      Tarefa[]
  roletas      RoletaCorretor[]
}

model Cliente {
  id                  String    @id @default(uuid())
  nomeCompleto        String
  email               String?   @unique
  telefone            String?
  facebook_lead_id    String?   @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  corretorId          String
  corretor            Usuario   @relation(fields: [corretorId], references: [id])

  imovelDeInteresseId String?
  imovelDeInteresse   Imovel?   @relation(fields: [imovelDeInteresseId], references: [id], onDelete: SetNull)

  budget              Float?
  preferences         String?

  currentFunnelStage  String   @default("Contato")
  overallStatus       ClientOverallStatus @default(Ativo)

  tarefas             Tarefa[]
  detalhesDeVenda     ClientWonDetails[]
  notas               Nota[]
}

enum ClientOverallStatus {
  Ativo
  Ganho
  Perdido
}

model ClientWonDetails {
  id          String   @id @default(uuid())
  sale_value  Float
  sale_date   DateTime @default(now())
  createdAt   DateTime @default(now())
  clienteId   String   @unique
  cliente     Cliente  @relation(fields: [clienteId], references: [id])
}

model Imovel {
  id                   String       @id @default(uuid())
  titulo               String
  descricao            String?
  endereco             String?
  preco                Float?
  tipo                 String?
  status               StatusImovel @default(Disponivel)
  quartos              Int?
  banheiros            Int?
  area                 Int?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  clientesComInteresse Cliente[]
}

model Nota {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  createdBy  String

  clienteId  String
  cliente    Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
}

model Tarefa {
  id        String   @id @default(uuid())
  titulo    String
  descricao String?
  dataHora  DateTime
  concluida Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clienteId String
  cliente   Cliente  @relation(fields: [clienteId], references: [id])
  usuarioId String
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model Roleta {
  id                String           @id @default(uuid())
  nome              String
  ativa             Boolean          @default(true)
  lastAssignedIndex Int              @default(0)
  corretores        RoletaCorretor[]
}

model RoletaCorretor {
  roletaId   String
  roleta     Roleta   @relation(fields: [roletaId], references: [id])
  corretorId String
  corretor   Usuario  @relation(fields: [corretorId], references: [id])

  @@id([roletaId, corretorId])
}

model LostReason {
  id         String   @id @default(uuid())
  reason     String
  active     Boolean  @default(true)
  created_at DateTime @default(now())
}

// --- Modelos de Configuração ---

model RoleSetting {
  roleName Role    @id
  isActive Boolean @default(true)
}

// --- Enums ---

enum Role {
  marketing_adm
  diretor
  gerente
  corretor
}

enum StatusImovel {
  Disponivel
  Reservado
  Vendido
}

model FunnelStage {
  id        String   @id @default(uuid())
  name      String   @unique
  order     Int
  color     String
  createdAt DateTime @default(now())
}
