generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL")
  directUrl    = env("POSTGRES_URL_NON_POOLING")
  relationMode = "foreignKeys"
}

// --- ENUMS ---
enum Role {
  marketing_adm
  diretor
  gerente
  corretor
  pre_vendas // Novo perfil
}

enum FunnelAccessLevel {
  full
  readonly
}

// --- Modelos ---

model Usuario {
  id               String           @id @default(uuid())
  nome             String
  email            String           @unique
  passwordHash     String?
  role             Role             @default(corretor) // Atualizado para usar o novo Enum
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  superiorId       String?
  superior         Usuario?         @relation("Hierarquia", fields: [superiorId], references: [id], onDelete: SetNull)
  subordinados     Usuario[]        @relation("Hierarquia")
  clientes         Cliente[]
  pushSubscription PushSubscription?
  tarefas          Tarefa[]
  roletas          RoletaCorretor[]
  frequencias      FrequenciaRegistro[]

  // ✅ --- RELAÇÕES DE OFERTA ATIVA ADICIONADAS ---
  createdOffers    ActiveOffer[]       @relation("CreatedOffers")
  assignedCalls    ActiveOfferClient[] @relation("AssignedCalls")

  // ✅ --- RELAÇÃO DE ACESSO AO FUNIL ---
  funnelAccess UserFunnelAccess[]
}

model Cliente {
  id                  String              @id @default(uuid())
  nomeCompleto        String
  email               String?             @unique
  telefone            String?
  facebook_lead_id    String?             @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  corretorId          String
  corretor            Usuario             @relation(fields: [corretorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  imovelDeInteresseId String?
  imovelDeInteresse   Imovel?             @relation(fields: [imovelDeInteresseId], references: [id], onDelete: SetNull)
  overallStatus       ClientOverallStatus @default(Ativo)

  // ✅ RELACIONAMENTO COM DOCUMENTOS ADICIONADO
  documentos          DocumentoCliente[]
  tags                Tag[]               @relation("ClienteTags")
  tarefas             Tarefa[]
  detalhesDeVenda     ClientWonDetails?
  notas               Nota[]

  // ✅ --- RELACIONAMENTO COM OFERTA ATIVA ---
  activeOfferClients ActiveOfferClient[]

  // ✅ --- CAMPOS DE FUNIL ATUALIZADOS ---
  funnelId    String
  funnel      Funnel      @relation(fields: [funnelId], references: [id])
  funnelStageId String
  funnelStage FunnelStage @relation(fields: [funnelStageId], references: [id])
}

// ✅ NOVO MODELO PARA DOCUMENTOS
model DocumentoCliente {
  id        String   @id @default(uuid())
  fileName  String
  url       String
  createdAt DateTime @default(now())

  clienteId String
  cliente   Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  color     String
  createdAt DateTime  @default(now())
  clientes  Cliente[] @relation("ClienteTags")
}

model Imovel {
  id                   String       @id @default(uuid())
  titulo               String
  features             String[]     @default([])
  endereco             String?
  preco                Float?
  tipo                 String?
  status               StatusImovel @default(Disponivel)
  quartos              Int?
  banheiros            Int?
  area                 Int?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  clientesComInteresse Cliente[]
  tipologias           TipologiaImovel[]
  imagens              ImagemImovel[]
}

model TipologiaImovel {
  id          String         @id @default(uuid())
  nome        String
  valor       Float
  area        Float?
  dormitorios Int?
  suites      Int?
  vagas       Int?
  imovelId    String
  imovel      Imovel         @relation(fields: [imovelId], references: [id], onDelete: Cascade)
  plantas     ImagemPlanta[]
}

model ImagemImovel {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  imovelId  String
  imovel    Imovel   @relation(fields: [imovelId], references: [id], onDelete: Cascade)
}

model ImagemPlanta {
  id          String          @id @default(uuid())
  url         String
  createdAt   DateTime        @default(now())
  tipologiaId String
  tipologia   TipologiaImovel @relation(fields: [tipologiaId], references: [id], onDelete: Cascade)
}

model Nota {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  createdBy String
  clienteId String
  cliente   Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
}

model Tarefa {
  id          String   @id @default(uuid())
  titulo      String
  descricao   String?
  status      String   @default("pendente")
  dataHora    DateTime
  concluida   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clienteId   String
  cliente     Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  usuarioId   String
  usuario     Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  tipo        TaskType
  prioridade  Priority
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userId    String   @unique
  user      Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Roleta {
  id                String           @id @default(uuid())
  nome              String
  ativa             Boolean          @default(true)
  validFrom         DateTime? // Data e hora de início da validade
  validUntil        DateTime? // Data e hora de fim da validade
  lastAssignedIndex Int              @default(0)
  corretores        RoletaCorretor[]
  funnelId          String?
  funnel            Funnel?          @relation(fields: [funnelId], references: [id], onDelete: SetNull)
}

model RoletaCorretor {
  roletaId   String
  roleta     Roleta   @relation(fields: [roletaId], references: [id], onDelete: Cascade)
  corretorId String
  corretor   Usuario  @relation(fields: [corretorId], references: [id], onDelete: Cascade)
  @@id([roletaId, corretorId])
}

model LostReason {
  id         String   @id @default(uuid())
  reason     String
  active     Boolean  @default(true)
  created_at DateTime @default(now())
}

model RoleSetting {
  roleName Role    @id
  isActive Boolean @default(true)
}

model ClientWonDetails {
  id         String   @id @default(uuid())
  sale_value Float
  sale_date  DateTime @default(now())
  createdAt  DateTime @default(now())
  clienteId  String   @unique
  cliente    Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
}

// --- NOVOS MODELOS PARA OFERTA ATIVA ---

model ActiveOffer {
  id        String              @id @default(uuid())
  name      String
  status    ActiveOfferStatus   @default(Pendente)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  createdById String
  createdBy   Usuario           @relation("CreatedOffers", fields: [createdById], references: [id])
  clients   ActiveOfferClient[]
}

model ActiveOfferClient {
  id            String                 @id @default(uuid())
  status        ActiveOfferClientStatus @default(Pendente)
  notes         String?
  contactedAt   DateTime?
  activeOfferId String
  activeOffer   ActiveOffer            @relation(fields: [activeOfferId], references: [id], onDelete: Cascade)
  clienteId     String
  cliente       Cliente                @relation(fields: [clienteId], references: [id], onDelete:Cascade)
  assignedToId  String
  assignedTo    Usuario                @relation("AssignedCalls", fields: [assignedToId], references: [id])
}

// --- NOVOS MODELOS PARA MÚLTIPLOS FUNIS ---

model Funnel {
  id             String             @id @default(uuid())
  name           String             @unique
  isPreSales     Boolean            @default(false)
  isDefaultEntry Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  stages         FunnelStage[]
  userAccess     UserFunnelAccess[]
  clients        Cliente[]
  roletas        Roleta[]
}

model FunnelStage {
  id        String   @id @default(uuid())
  name      String
  order     Int
  color     String
  funnelId  String
  funnel    Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clients   Cliente[]

  @@unique([funnelId, name])
}

model UserFunnelAccess {
  userId      String
  user        Usuario           @relation(fields: [userId], references: [id], onDelete: Cascade)
  funnelId    String
  funnel      Funnel            @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  accessLevel FunnelAccessLevel

  @@id([userId, funnelId])
}

model FrequenciaConfig {
  id        String   @id @default(cuid())
  nome      String // Ex: "Stand de Vendas - Lançamento X"
  latitude  Float
  longitude Float
  raio      Int // Raio em metros
  horarios  Json // Ex: [{ inicio: "10:00", fim: "12:00" }, { inicio: "14:00", fim: "16:00" }]
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FrequenciaRegistro {
  id           String   @id @default(cuid())
  userId       String
  usuario      Usuario  @relation(fields: [userId], references: [id])
  latitude     Float
  longitude    Float
  distancia    Int // Distância calculada do ponto central
  dentroDoRaio Boolean
  createdAt    DateTime @default(now())
}

// --- ENUMS ---
enum StatusImovel {
  Disponivel
  Reservado
  Vendido
  LANCAMENTO
}

enum ClientOverallStatus {
  Ativo
  Ganho
  Perdido
}

enum TaskType {
  LIGACAO
  EMAIL
  WHATSAPP
  VISITA
  OUTRO
}

enum Priority {
  BAIXA
  MEDIA
  ALTA
}

enum ActiveOfferStatus {
  Pendente
  EmAndamento
  Concluida
}

enum ActiveOfferClientStatus {
  Pendente
  Contactado
  NaoAtendeu
  Descartado
}
