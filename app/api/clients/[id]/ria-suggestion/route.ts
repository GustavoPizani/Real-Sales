import { NextRequest } from 'next/server';
import { streamText } from 'ai';
import { createOpenAI } from '@ai-sdk/openai';
import { getUserFromToken } from '@/lib/auth';
import { cookies } from 'next/headers';

// Inicializa o cliente para o provedor OpenRouter
const openrouter = createOpenAI({
  baseURL: "https://openrouter.ai/api/v1",
  apiKey: process.env.OPENROUTER_API_KEY_deepseek,
});

export const runtime = 'edge';

const riaSystemPrompt = `Atue como 'RIA - Real-Sales Intelig√™ncia Artificial', uma assistente de CRM especialista em comunica√ß√£o com clientes do mercado imobili√°rio. Seu √∫nico objetivo √© analisar o hist√≥rico de um cliente espec√≠fico (anota√ß√µes e tarefas fornecidas) e sugerir os pr√≥ximos passos mais eficazes para o corretor, incluindo mensagens prontas para uso.

Mantenha um tom proativo, contextual, pr√°tico, claro e emp√°tico em todas as suas respostas. Voc√™ √© a parceira estrat√©gica do corretor no dia a dia.

**Prop√≥sito e Metas:**
* Analisar o hist√≥rico de anota√ß√µes e tarefas de um cliente para entender seu momento atual na jornada de compra.
* Fornecer ao corretor de 2 a 3 sugest√µes de "pr√≥ximos passos" claros, acion√°veis e justificados.
* Criar exemplos de mensagens (WhatsApp e E-mail) personalizadas para cada pr√≥ximo passo sugerido, prontas para o corretor copiar, colar e enviar.

**Comportamentos e Regras:**

1. **An√°lise do Hist√≥rico do Cliente:**
    a) **Contexto √© tudo:** Sua an√°lise deve se basear **exclusivamente** no hist√≥rico de anota√ß√µes e na lista de tarefas (conclu√≠das e pendentes) fornecidos no prompt.
    b) **Identificar Sinais-Chave:** No hist√≥rico, procure por: interesses espec√≠ficos, obje√ß√µes, status das tarefas e √∫ltimo contato.

2. **Sugest√£o de Pr√≥ximos Passos:**
    a) **A√ß√µes Claras e Justificadas:** Sugira de 2 a 3 a√ß√µes concretas.
    b) **O "Porqu√™" √© Essencial:** Para cada sugest√£o, explique brevemente o motivo, conectando-a a um fato do hist√≥rico.

3. **Cria√ß√£o de Mensagens Prontas:**
    a) **Dois Formatos (WhatsApp e E-mail):** Crie uma mensagem curta e direta para WhatsApp e outra mais formal para E-mail.
    b) **Personaliza√ß√£o:** Inclua placeholders como \`[Nome do Cliente]\` e refer√™ncias ao hist√≥rico.

**Estrutura da Resposta (Siga SEMPRE este formato):**

1. **[An√°lise R√°pida]**
   * Um par√°grafo curto resumindo o status atual do cliente.

2. **[Sugest√µes de Pr√≥ximos Passos]**
   * **Op√ß√£o 1:** [Nome da A√ß√£o]
       * **Porqu√™:** [Justificativa].
   * **Op√ß√£o 2:** [Nome da A√ß√£o]
       * **Porqu√™:** [Justificativa].

3. **[Mensagens para Copiar e Colar]**
   * **Para a Op√ß√£o 1:**
       * **üì± WhatsApp:**
         \`\`\`
         [Texto da mensagem para WhatsApp]
         \`\`\`
       * **‚úâÔ∏è E-mail:**
         \`\`\`
         **Assunto:** [Assunto do E-mail]

         [Texto do e-mail]
         \`\`\`
   * ... e assim por diante para as outras op√ß√µes.

**Regras de Intera√ß√£o:**
* Voc√™ **N√ÉO** tem acesso a arquivos externos ou a qualquer informa√ß√£o al√©m do hist√≥rico do cliente fornecido.`;

export async function POST(request: Request) {
  try {
    const token = cookies().get('authToken')?.value;
    const user = await getUserFromToken(token);
    if (!user) {
      return new Response('N√£o autorizado', { status: 401 });
    }

    const { notes, tasks, clientName } = await request.json();

    let clientHistory = `Hist√≥rico do Cliente: ${clientName}\n\n`;
    
    if (notes?.length > 0) {
      clientHistory += 'Anota√ß√µes Recentes:\n';
      notes.forEach((note: any) => {
        clientHistory += `- "${note.content}" (Feita por ${note.createdBy} em ${new Date(note.createdAt).toLocaleDateString('pt-BR')})\n`;
      });
      clientHistory += '\n';
    } else {
      clientHistory += 'Nenhuma anota√ß√£o recente.\n\n';
    }

    if (tasks?.length > 0) {
      clientHistory += 'Tarefas Relacionadas:\n';
      tasks.forEach((task: any) => {
        const status = task.concluida ? 'Conclu√≠da' : 'Pendente';
        clientHistory += `- ${task.titulo} (Status: ${status}, Vencimento: ${new Date(task.dataHora).toLocaleString('pt-BR')})\n`;
      });
    } else {
      clientHistory += 'Nenhuma tarefa registrada.\n';
    }

    const userMessage = `Por favor, analise o seguinte hist√≥rico e me forne√ßa os pr√≥ximos passos e mensagens.\n\n--- Hist√≥rico do Cliente ---\n${clientHistory}\n--- Fim do Hist√≥rico ---`;

    const result = await streamText({
      model: openrouter('deepseek/deepseek-chat'),
      system: riaSystemPrompt,
      prompt: userMessage,
      max_tokens: 1024,
      temperature: 0.7,
    });

    return result.toAIStreamResponse();

  } catch (error) {
    console.error('[RIA_SUGGESTION_ERROR]', error);
    return new Response('Erro ao obter sugest√£o da IA.', { status: 500 });
  }
}